<!DOCTYPE html>
<html lang="en">

<head>
    <link rel="stylesheet" href="/css/main-page.css">
    <script src="/js/main-page.js"></script>
    <script src="/js/nav-bar-search.js"></script>

    <script>
        function editReview(event, reviewId, button) {
        event.preventDefault();
        var form = document.getElementById('edit-review-form-' + reviewId);
        form.style.display = 'block';
        }

        document.addEventListener('DOMContentLoaded', function () {
    // Loop through each review to attach event listeners
    document.querySelectorAll('.col-md-4').forEach(reviewContainer => {
        const reviewId = reviewContainer.dataset.reviewId;
        const editReviewForm = document.getElementById('edit-review-form-' + reviewId);

        // Check if the edit form exists
        if (editReviewForm) {
            editReviewForm.addEventListener('submit', function (event) {
                event.preventDefault();

                var formData = new FormData(event.target);
                var title = formData.get('title');
                var comment = formData.get('comment');
                var recommendation = formData.get('recommendation');

                // Find the closest parent element with the data-review-id attribute
                var reviewContainer = this.closest('.col-md-4');
                var reviewId = reviewContainer.dataset.reviewId;

                // Check if reviewId is a valid ObjectId
                if (!isValidObjectId(reviewId)) {
                    console.error('Invalid reviewId:', reviewId);
                    return;
                }

                fetch('/update-review/' + reviewId, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        title: title,
                        comment: comment,
                        recommendation: recommendation
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        // Handle the response as needed
                        console.log('Update successful:', data);

                        // Update the review content in the DOM
                        reviewContainer.querySelector('h5').innerText = title;
                        reviewContainer.querySelector('p').innerText = comment;
                        reviewContainer.querySelector('#recommendation').innerText = 'Thoughts: ' + recommendation;

                        // Optionally, you can hide the edit form
                        editReviewForm.style.display = 'none';
                    })
                    .catch(error => {
                        // Handle errors
                        console.error('Error updating review:', error);
                    });
            });
        }

        // Call disableButtons for each review on page load
        disableButtons(reviewId);
    });
});


        // Function to check if a string is a valid ObjectId
        function isValidObjectId(id) {
            return /^[a-f\d]{24}$/i.test(id);
        }

        function deleteReview(button) {
            var reviewId = button.closest('.col-md-4').dataset.reviewId;

            // Check if reviewId is a valid ObjectId
            if (!isValidObjectId(reviewId)) {
                console.error('Invalid reviewId:', reviewId);
                return;
            }

            fetch('/delete-review/' + reviewId, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
            })
                .then(response => response.json())
                .then(data => {
                    // Handle the response as needed
                    console.log('Delete successful:', data);
                    // Optionally, you can remove the deleted review from the UI
                    button.closest('.col-md-4').remove();
                })
                .catch(error => {
                    // Handle errors
                    console.error('Error deleting review:', error);
                });
        }

        function markHelpful(reviewId, button) {
            markReview(reviewId, 'helpful');
            disableButtons(reviewId);
        }

        function markUnhelpful(reviewId, button) {
            markReview(reviewId, 'unhelpful');
            disableButtons(reviewId);
        }

        function disableButtons(reviewId) {
            const helpfulButtons = document.querySelectorAll(`[data-review-id="${reviewId}"] .mark-helpful`);
            const unhelpfulButtons = document.querySelectorAll(`[data-review-id="${reviewId}"] .mark-unhelpful`);

            // Check if the user has already voted on this review
            fetch(`/check-user-vote/${reviewId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                },
            })
                .then(response => response.json())
                .then(data => {
                    if (data.userHasVoted) {
                        // If the user has already voted, disable both buttons
                        helpfulButtons.forEach(button => {
                            button.disabled = true;
                        });

                        unhelpfulButtons.forEach(button => {
                            button.disabled = true;
                        });
                    }
                })
                .catch(error => {
                    // Handle errors
                    console.error('Error checking user vote:', error);
                });
        }
        // Function to handle marking a review
        function markReview(reviewId, action) {
            // Check if reviewId is a valid ObjectId
            if (!isValidObjectId(reviewId)) {
                console.error('Invalid reviewId:', reviewId);
                return;
            }

            // Fetch URL for marking helpful or unhelpful based on the 'action' parameter
            const url = action === 'helpful' ? '/mark-helpful/' : '/mark-unhelpful/';

            // Check if the user has already voted on this review
            fetch(`/check-user-vote/${reviewId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                },
            })
                .then(response => response.json())
                .then(data => {
                    if (!data.userHasVoted) {
                        // If the user hasn't voted, proceed with marking the review
                        performMarkReview(url, reviewId, action);
                    } else {
                        console.log('User has already voted on this review.');
                        // Optionally, you can provide feedback to the user or handle this case as needed
                    }
                })
                .catch(error => {
                    // Handle errors
                    console.error('Error checking user vote:', error);
                });
        }

        function performMarkReview(url, reviewId, action) {
            fetch(url + reviewId, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
            })
                .then(response => response.json())
                .then(data => {
                    // Handle the response as needed
                    console.log(action + ' mark successful:', data);

                    // Update the helpful or unhelpful count in the DOM
                    const reviewContainer = document.getElementById(reviewId);
                    if (action === 'helpful') {
                        reviewContainer.querySelector('.count p:nth-child(1)').innerText = 'Helpful: ' + data.helpfulCount;
                    } else {
                        reviewContainer.querySelector('.count p:nth-child(2)').innerText = 'Unhelpful: ' + data.unhelpfulCount;
                    }
                })
                .catch(error => {
                    // Handle errors
                    console.error('Error marking review as ' + action + ':', error);
                });
        }




    </script>
</head>

<body>
    <div class="col-md-4" id="{{review._id}}" data-review-id="{{review._id}}">
        <div class="card">
            <div class="card-body">
                <div class="user-info">
                    <a href="/this-profile/{{review.username}}">
                        <img src="{{review.usericon}}">
                        <span class="username">@{{review.username}}</span>
                    </a>
                </div>
                <div>
                    <h5>{{review.title}}</h5>
                    <p>{{review.comment}}</p>
                    <p><span id="recommendation">Thoughts: {{review.recommendation}}</span></p>
                    <div class="review-buttons">
                        {{#if loggedInUser}}
                        {{#if_eq loggedInUser.username review.username}}
                        <button class="edit" onclick="editReview(event, '{{review._id}}', this)">Edit</button>
                        <button class="delete" onclick="deleteReview(this)">Delete</button>
                        {{else}}
                        <button class="mark-helpful" onclick="markHelpful('{{review._id}}', this)">Mark Helpful</button>
                        <button class="mark-unhelpful" onclick="markUnhelpful('{{review._id}}', this)">Mark
                            Unhelpful</button>


                        {{/if_eq}}
                        {{/if}}
                    </div>
                    <div class="count">
                        <p>Helpful: {{review.helpfulCount}}</p>
                        <p>Unhelpful: {{review.unhelpfulCount}}</p>
                    </div>

                    <form id="edit-review-form-{{review._id}}" style="display: none;" action="/update-review/{{review._id}}" method="PUT">

                        <!-- Add the hidden field for method override -->
                        <input type="hidden" name="_method" value="PUT">
                        <input type="hidden" name="restaurantId" value="{{review.restaurantId}}">

                        <label for="title">Title:</label><br>
                        <input type="text" id="title" name="title" value="{{review.title}}"><br>
                        <label for="comment">Comment:</label><br>
                        <textarea id="comment" name="comment">{{review.comment}}</textarea><br>
                        <label for="recommendation">Recommendation:</label><br>
                        <select id="recommendation" name="recommendation">
                            <option value="Recommended" {{#if_eq review.recommendation "Recommended"
                                }}selected{{/if_eq}}>Recommended</option>
                            <option value="Not Recommended" {{#if_eq review.recommendation "Not Recommended"
                                }}selected{{/if_eq}}>Not Recommended</option>
                        </select><br>
                        <input type="submit" value="Submit">
                    </form>

                    {{#if loggedInUser}}
                    <form id="reply-form" action="/submit-reply/{{review._id}}" method="POST">
                        <textarea id="reply-content" name="content" placeholder="Submit a reply..." required></textarea>
                        <input type="submit" value="Submit Reply" id="btnsubmit">
                    </form>
                    {{/if}}

                    <div id="comments-section">
                        <!-- Display existing comments here -->
                        {{#each review.replies}}
                        <div class="reply">
                            <a href="/this-profile/{{review.username}}">
                                <img class="reply" src="{{this.user.profilePicture}}">
                                <span id="replyusername">@{{this.user.username}}</span>
                            </a>
                            <p>{{this.content}}</p>
                        </div>
                        {{/each}}
                    </div>

                </div>

            </div>
        </div>
    </div>
</body>

</html>